titlePanel(h1("Stochastic Individual Contact Model", style="text-align: left;")),
sidebarLayout(
sidebarPanel(),
mainPanel(
h3("Introduction"),
p("sometext")
) #closes main panel
) #closes sidebar Layout
) #closes tabpanel i think
) #closes navbarPage
#https://www.newyorker.com/news/dispatch/the-end-of-the-beginning-seattle-braces-for-the-next-phase-of-the-coronavirus-fight?fbclid=IwAR19H5lGPOeMKSrUmXP2-ggl1ff58xTc2wSbDpZXUIkGzd0XONMi-OCv9F0
runApp()
runApp()
runApp()
runApp()
runApp()
plot_inc_1 <- plot(mod_1, main="Title 1", ylab="Prevalence")
param_1 <- param.dcm(inf.prob = 2, #inf.prob argument sets the transmission probability per act / probability of transmission per contact,
act.rate = 0.4, #act. rate =  rate of contacts or acts between actors
rec.rate = 1/5, #recovery rate
a.rate = 1/95, ds.rate = 1/100, di.rate = 1/80, dr.rate = 1/100)
init_1 <- init.dcm(s.num = 10000, i.num = 5000, r.num = 0) #have to specify the number of initially recovered, even if that is 0.
control_1 <- control.dcm(type = "SIR", nsteps = 500, dt = 0.5) #dt argument may be used to obtain model results in fractional time units
mod_1 <- dcm(param_1, init_1, control_1)
# #By default, the plot function will plot the prevalences for all compartments in the model
# #right plot we override that using the y argument to specify that disease incidence (the si.flow element of the model object) should be plotted
par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2)) #change some default graphical options
plot_inc_1 <- plot(mod_1, main="Title 1", ylab="Prevalence")
param_1 <- param.dcm(inf.prob = 2, #inf.prob argument sets the transmission probability per act / probability of transmission per contact,
act.rate = 0.5, #act. rate =  rate of contacts or acts between actors
rec.rate = 1/5, #recovery rate
a.rate = 1/95, ds.rate = 1/100, di.rate = 1/80, dr.rate = 1/100)
init_1 <- init.dcm(s.num = 10000, i.num = 5000, r.num = 0) #have to specify the number of initially recovered, even if that is 0.
control_1 <- control.dcm(type = "SIR", nsteps = 500, dt = 0.5) #dt argument may be used to obtain model results in fractional time units
mod_1 <- dcm(param_1, init_1, control_1)
# #By default, the plot function will plot the prevalences for all compartments in the model
# #right plot we override that using the y argument to specify that disease incidence (the si.flow element of the model object) should be plotted
par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2)) #change some default graphical options
plot_inc_1 <- plot(mod_1, main="Title 1", ylab="Prevalence")
param_1 <- param.dcm(inf.prob = 2, #inf.prob argument sets the transmission probability per act / probability of transmission per contact,
act.rate = 0.5, #act. rate =  rate of contacts or acts between actors
rec.rate = 1/5, #recovery rate
a.rate = 0, ds.rate = 1/100, di.rate = 1/80, dr.rate = 1/100)
init_1 <- init.dcm(s.num = 10000, i.num = 5000, r.num = 0) #have to specify the number of initially recovered, even if that is 0.
control_1 <- control.dcm(type = "SIR", nsteps = 500, dt = 0.5) #dt argument may be used to obtain model results in fractional time units
mod_1 <- dcm(param_1, init_1, control_1)
# #By default, the plot function will plot the prevalences for all compartments in the model
# #right plot we override that using the y argument to specify that disease incidence (the si.flow element of the model object) should be plotted
par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2)) #change some default graphical options
plot_inc_1 <- plot(mod_1, main="Title 1", ylab="Prevalence")
param_1 <- param.dcm(inf.prob = 2, #inf.prob argument sets the transmission probability per act / probability of transmission per contact,
act.rate = 0.5, #act. rate =  rate of contacts or acts between actors
rec.rate = 1/5, #recovery rate
a.rate = 0, ds.rate = 1/100, di.rate = 1/80, dr.rate = 1/100)
init_1 <- init.dcm(s.num = 10000, i.num = 1, r.num = 0) #have to specify the number of initially recovered, even if that is 0.
control_1 <- control.dcm(type = "SIR", nsteps = 500, dt = 0.5) #dt argument may be used to obtain model results in fractional time units
mod_1 <- dcm(param_1, init_1, control_1)
# #By default, the plot function will plot the prevalences for all compartments in the model
# #right plot we override that using the y argument to specify that disease incidence (the si.flow element of the model object) should be plotted
par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2)) #change some default graphical options
plot_inc_1 <- plot(mod_1, main="Title 1", ylab="Prevalence")
param_1 <- param.dcm(inf.prob = 2, #inf.prob argument sets the transmission probability per act / probability of transmission per contact,
act.rate = 0.5, #act. rate =  rate of contacts or acts between actors
rec.rate = 1/5, #recovery rate
a.rate = 0, ds.rate = 1/100, di.rate = 1/80, dr.rate = 1/100)
init_1 <- init.dcm(s.num = 10000, i.num = 1, r.num = 0) #have to specify the number of initially recovered, even if that is 0.
control_1 <- control.dcm(type = "SIR", nsteps = 500, dt = 0.5) #dt argument may be used to obtain model results in fractional time units
mod_1 <- dcm(param_1, init_1, control_1)
# #By default, the plot function will plot the prevalences for all compartments in the model
# #right plot we override that using the y argument to specify that disease incidence (the si.flow element of the model object) should be plotted
par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2)) #change some default graphical options
plot_inc_1 <- plot(mod_1, main="Title 1", ylab="Prevalence")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
param_1 <- param.dcm(inf.prob = 1.2, #inf.prob argument sets the transmission probability per act / probability of transmission per contact,
act.rate = 0.5, #act. rate =  rate of contacts or acts between actors
rec.rate = 1/5, #recovery rate
a.rate = 1/95, ds.rate = 1/100, di.rate = 1/80, dr.rate = 1/100)
init_1 <- init.dcm(s.num = 2000000, i.num = 1, r.num = 0) #have to specify the number of initially recovered, even if that is 0.
control_1 <- control.dcm(type = "SIR", nsteps = 500, dt = 0.5) #dt argument may be used to obtain model results in fractional time units
mod_1 <- dcm(param_1, init_1, control_1)
# #By default, the plot function will plot the prevalences for all compartments in the model
# #right plot we override that using the y argument to specify that disease incidence (the si.flow element of the model object) should be plotted
par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2)) #change some default graphical options
plot_inc_1 <- plot(mod_1, main="Title 1", ylab="Prevalence")
runApp()
runApp()
runApp()
runApp()
runApp()
param_1 <- param.dcm(inf.prob = 1.2, #inf.prob argument sets the transmission probability per act / probability of transmission per contact,
act.rate = 0.5, #act. rate =  rate of contacts or acts between actors
rec.rate = 1/5, #recovery rate
a.rate = 1/95, ds.rate = 1/100, di.rate = 1/80, dr.rate = 1/100)
init_1 <- init.dcm(s.num = 1000, i.num = 1, r.num = 0) #have to specify the number of initially recovered, even if that is 0.
control_1 <- control.dcm(type = "SIR", nsteps = 200, dt = 0.5) #dt argument may be used to obtain model results in fractional time units
mod_1 <- dcm(param_1, init_1, control_1)
# #By default, the plot function will plot the prevalences for all compartments in the model
# #right plot we override that using the y argument to specify that disease incidence (the si.flow element of the model object) should be plotted
par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2)) #change some default graphical options
plot_inc_1 <- plot(mod_1, main="Title 1", ylab="Prevalence")
runApp()
param_1 <- param.dcm(inf.prob = 2, #inf.prob argument sets the transmission probability per act / probability of transmission per contact,
act.rate = 15, #act. rate =  rate of contacts or acts between actors
rec.rate = 1/5, #recovery rate
a.rate = 0, ds.rate = 1/100, di.rate = 1/80, dr.rate = 1/100)
init_1 <- init.dcm(s.num = 2250000, i.num = 1, r.num = 0) #have to specify the number of initially recovered, even if that is 0.
control_1 <- control.dcm(type = "SIR", nsteps = 200, dt = 1) #dt argument may be used to obtain model results in fractional time units
mod_1 <- dcm(param_1, init_1, control_1)
# #By default, the plot function will plot the prevalences for all compartments in the model
# #right plot we override that using the y argument to specify that disease incidence (the si.flow element of the model object) should be plotted
par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2)) #change some default graphical options
plot_inc_1 <- plot(mod_1, main="Lockdown with grocery shopping, and social distancing", ylab="Prevalence")
param_1 <- param.dcm(inf.prob = 1.2, #inf.prob argument sets the transmission probability per act / probability of transmission per contact,
act.rate = 0.5, #act. rate =  rate of contacts or acts between actors
rec.rate = 1/5, #recovery rate
a.rate = 0, ds.rate = 1/100, di.rate = 1/80, dr.rate = 1/100)
init_1 <- init.dcm(s.num = 2250000, i.num = 1, r.num = 0) #have to specify the number of initially recovered, even if that is 0.
control_1 <- control.dcm(type = "SIR", nsteps = 200, dt = 1) #dt argument may be used to obtain model results in fractional time units
mod_1 <- dcm(param_1, init_1, control_1)
# #By default, the plot function will plot the prevalences for all compartments in the model
# #right plot we override that using the y argument to specify that disease incidence (the si.flow element of the model object) should be plotted
par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2)) #change some default graphical options
plot_inc_1 <- plot(mod_1, main="Lockdown with grocery shopping, and social distancing", ylab="Prevalence")
param_1 <- param.dcm(inf.prob = 1.2, #inf.prob argument sets the transmission probability per act / probability of transmission per contact,
act.rate = 0.5, #act. rate =  rate of contacts or acts between actors
rec.rate = 1/5, #recovery rate
a.rate = 0, ds.rate = 1/100, di.rate = 1/80, dr.rate = 1/100)
init_1 <- init.dcm(s.num = 2250000, i.num = 1, r.num = 0) #have to specify the number of initially recovered, even if that is 0.
control_1 <- control.dcm(type = "SIR", nsteps = 350, dt = 1) #dt argument may be used to obtain model results in fractional time units
mod_1 <- dcm(param_1, init_1, control_1)
# #By default, the plot function will plot the prevalences for all compartments in the model
# #right plot we override that using the y argument to specify that disease incidence (the si.flow element of the model object) should be plotted
par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2)) #change some default graphical options
plot_inc_1 <- plot(mod_1, main="Lockdown with grocery shopping, and social distancing", ylab="Prevalence")
param_1 <- param.dcm(inf.prob = 1.2, #inf.prob argument sets the transmission probability per act / probability of transmission per contact,
act.rate = 0.5, #act. rate =  rate of contacts or acts between actors
rec.rate = 1/5, #recovery rate
a.rate = 0, ds.rate = 1/100, di.rate = 1/80, dr.rate = 1/100)
init_1 <- init.dcm(s.num = 2250000, i.num = 1, r.num = 0) #have to specify the number of initially recovered, even if that is 0.
control_1 <- control.dcm(type = "SIR", nsteps = 500, dt = 1) #dt argument may be used to obtain model results in fractional time units
mod_1 <- dcm(param_1, init_1, control_1)
# #By default, the plot function will plot the prevalences for all compartments in the model
# #right plot we override that using the y argument to specify that disease incidence (the si.flow element of the model object) should be plotted
par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2)) #change some default graphical options
plot_inc_1 <- plot(mod_1, main="Lockdown with grocery shopping, and social distancing", ylab="Prevalence")
param_1 <- param.dcm(inf.prob = 1.2, #inf.prob argument sets the transmission probability per act / probability of transmission per contact,
act.rate = 4, #act. rate =  rate of contacts or acts between actors
rec.rate = 1/5, #recovery rate
a.rate = 0, ds.rate = 1/100, di.rate = 1/80, dr.rate = 1/100)
init_1 <- init.dcm(s.num = 2250000, i.num = 1, r.num = 0) #have to specify the number of initially recovered, even if that is 0.
control_1 <- control.dcm(type = "SIR", nsteps = 300, dt = 1) #dt argument may be used to obtain model results in fractional time units
mod_1 <- dcm(param_1, init_1, control_1)
# #By default, the plot function will plot the prevalences for all compartments in the model
# #right plot we override that using the y argument to specify that disease incidence (the si.flow element of the model object) should be plotted
par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2)) #change some default graphical options
plot_inc_1 <- plot(mod_1, main="Lockdown with grocery shopping, and social distancing", ylab="Prevalence")
param_1 <- param.dcm(inf.prob = 1.2, #inf.prob argument sets the transmission probability per act / probability of transmission per contact,
act.rate = 0.5, #act. rate =  rate of contacts or acts between actors
rec.rate = 1/5, #recovery rate
a.rate = 0, ds.rate = 1/100, di.rate = 1/80, dr.rate = 1/100)
init_1 <- init.dcm(s.num = 2250000, i.num = 1, r.num = 0) #have to specify the number of initially recovered, even if that is 0.
control_1 <- control.dcm(type = "SIR", nsteps = 300, dt = 1) #dt argument may be used to obtain model results in fractional time units
mod_1 <- dcm(param_1, init_1, control_1)
# #By default, the plot function will plot the prevalences for all compartments in the model
# #right plot we override that using the y argument to specify that disease incidence (the si.flow element of the model object) should be plotted
par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2)) #change some default graphical options
plot_inc_1 <- plot(mod_1, main="Lockdown with grocery shopping, and social distancing", ylab="Prevalence")
param_1 <- param.dcm(inf.prob = 1.2, #inf.prob argument sets the transmission probability per act / probability of transmission per contact,
act.rate = 0.5, #act. rate =  rate of contacts or acts between actors
rec.rate = 1/5, #recovery rate
a.rate = 0, ds.rate = 1/100, di.rate = 1/80, dr.rate = 1/100)
init_1 <- init.dcm(s.num = 2250000, i.num = 1, r.num = 0) #have to specify the number of initially recovered, even if that is 0.
control_1 <- control.dcm(type = "SIR", nsteps = 500, dt = 1) #dt argument may be used to obtain model results in fractional time units
mod_1 <- dcm(param_1, init_1, control_1)
# #By default, the plot function will plot the prevalences for all compartments in the model
# #right plot we override that using the y argument to specify that disease incidence (the si.flow element of the model object) should be plotted
par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2)) #change some default graphical options
plot_inc_1 <- plot(mod_1, main="Lockdown with grocery shopping, and social distancing", ylab="Prevalence")
param_1 <- param.dcm(inf.prob = 1.2, #inf.prob argument sets the transmission probability per act / probability of transmission per contact,
act.rate = 0.5, #act. rate =  rate of contacts or acts between actors
rec.rate = 1/5, #recovery rate
a.rate = 0, ds.rate = 1/100, di.rate = 1/80, dr.rate = 1/100)
init_1 <- init.dcm(s.num = 2250000, i.num = 1, r.num = 0) #have to specify the number of initially recovered, even if that is 0.
control_1 <- control.dcm(type = "SIR", nsteps = 400, dt = 1) #dt argument may be used to obtain model results in fractional time units
mod_1 <- dcm(param_1, init_1, control_1)
# #By default, the plot function will plot the prevalences for all compartments in the model
# #right plot we override that using the y argument to specify that disease incidence (the si.flow element of the model object) should be plotted
par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2)) #change some default graphical options
plot_inc_1 <- plot(mod_1, main="Lockdown with grocery shopping, and social distancing", ylab="Prevalence")
param_1 <- param.dcm(inf.prob = 1.2, #inf.prob argument sets the transmission probability per act / probability of transmission per contact,
act.rate = 2, #act. rate =  rate of contacts or acts between actors
rec.rate = 1/5, #recovery rate
a.rate = 0, ds.rate = 1/100, di.rate = 1/80, dr.rate = 1/100)
init_1 <- init.dcm(s.num = 2250000, i.num = 1, r.num = 0) #have to specify the number of initially recovered, even if that is 0.
control_1 <- control.dcm(type = "SIR", nsteps = 400, dt = 1) #dt argument may be used to obtain model results in fractional time units
mod_1 <- dcm(param_1, init_1, control_1)
# #By default, the plot function will plot the prevalences for all compartments in the model
# #right plot we override that using the y argument to specify that disease incidence (the si.flow element of the model object) should be plotted
par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2)) #change some default graphical options
plot_inc_1 <- plot(mod_1, main="Lockdown with grocery shopping, and social distancing", ylab="Prevalence")
param_1 <- param.dcm(inf.prob = 1.2, #inf.prob argument sets the transmission probability per act / probability of transmission per contact,
act.rate = 0.7, #act. rate =  rate of contacts or acts between actors
rec.rate = 1/5, #recovery rate
a.rate = 0, ds.rate = 1/100, di.rate = 1/80, dr.rate = 1/100)
init_1 <- init.dcm(s.num = 2250000, i.num = 1, r.num = 0) #have to specify the number of initially recovered, even if that is 0.
control_1 <- control.dcm(type = "SIR", nsteps = 400, dt = 1) #dt argument may be used to obtain model results in fractional time units
mod_1 <- dcm(param_1, init_1, control_1)
# #By default, the plot function will plot the prevalences for all compartments in the model
# #right plot we override that using the y argument to specify that disease incidence (the si.flow element of the model object) should be plotted
par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2)) #change some default graphical options
plot_inc_1 <- plot(mod_1, main="Lockdown with grocery shopping, and social distancing", ylab="Prevalence")
param_1a <- param.dcm(inf.prob = 1.2, #inf.prob argument sets the transmission probability per act / probability of transmission per contact,
act.rate = 3, #act. rate =  rate of contacts or acts between actors
rec.rate = 1/5, #recovery rate
a.rate = 0, ds.rate = 1/100, di.rate = 1/80, dr.rate = 1/100)
init_1a <- init.dcm(s.num = 2250000, i.num = 1, r.num = 0) #have to specify the number of initially recovered, even if that is 0.
control_1a <- control.dcm(type = "SIR", nsteps = 400, dt = 1) #dt argument may be used to obtain model results in fractional time units
mod_1a <- dcm(param_1a, init_1a, control_1a)
plot(mod_1a, main="Lockdown with grocery shopping, and social distancing", ylab="Prevalence")
param_1a <- param.dcm(inf.prob = 1.2, #inf.prob argument sets the transmission probability per act / probability of transmission per contact,
act.rate = 4, #act. rate =  rate of contacts or acts between actors
rec.rate = 1/5, #recovery rate
a.rate = 0, ds.rate = 1/100, di.rate = 1/80, dr.rate = 1/100)
init_1a <- init.dcm(s.num = 2250000, i.num = 1, r.num = 0) #have to specify the number of initially recovered, even if that is 0.
control_1a <- control.dcm(type = "SIR", nsteps = 400, dt = 1) #dt argument may be used to obtain model results in fractional time units
mod_1a <- dcm(param_1a, init_1a, control_1a)
plot(mod_1a, main="Lockdown with grocery shopping, and social distancing", ylab="Prevalence")
param_1a <- param.dcm(inf.prob = 1.2, #inf.prob argument sets the transmission probability per act / probability of transmission per contact,
act.rate = 4, #act. rate =  rate of contacts or acts between actors
rec.rate = 1/5, #recovery rate
a.rate = 0, ds.rate = 1/100, di.rate = 1/80, dr.rate = 1/100)
init_1a <- init.dcm(s.num = 2250000, i.num = 1, r.num = 0) #have to specify the number of initially recovered, even if that is 0.
control_1a <- control.dcm(type = "SIR", nsteps = 400, dt = 1) #dt argument may be used to obtain model results in fractional time units
mod_1a <- dcm(param_1a, init_1a, control_1a)
plot(mod_1a, main="Lockdown with grocery shopping, and social distancing", ylab="Prevalence")
param_1a <- param.dcm(inf.prob = 1.2, #inf.prob argument sets the transmission probability per act / probability of transmission per contact,
act.rate = 5, #act. rate =  rate of contacts or acts between actors
rec.rate = 1/5, #recovery rate
a.rate = 0, ds.rate = 1/100, di.rate = 1/80, dr.rate = 1/100)
init_1a <- init.dcm(s.num = 2250000, i.num = 1, r.num = 0) #have to specify the number of initially recovered, even if that is 0.
control_1a <- control.dcm(type = "SIR", nsteps = 400, dt = 1) #dt argument may be used to obtain model results in fractional time units
mod_1a <- dcm(param_1a, init_1a, control_1a)
plot(mod_1a, main="Lockdown with grocery shopping, and social distancing", ylab="Prevalence")
param_1a <- param.dcm(inf.prob = 1.2, #inf.prob argument sets the transmission probability per act / probability of transmission per contact,
act.rate = 4, #act. rate =  rate of contacts or acts between actors
rec.rate = 1/5, #recovery rate
a.rate = 0, ds.rate = 1/100, di.rate = 1/80, dr.rate = 1/100)
init_1a <- init.dcm(s.num = 2250000, i.num = 1, r.num = 0) #have to specify the number of initially recovered, even if that is 0.
control_1a <- control.dcm(type = "SIR", nsteps = 400, dt = 1) #dt argument may be used to obtain model results in fractional time units
mod_1a <- dcm(param_1a, init_1a, control_1a)
plot(mod_1a, main="Lockdown with grocery shopping, and social distancing", ylab="Prevalence")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#plotting for iCM
output$viz_icm <- renderPlot({plot(mod_icm(), mean.line = input$showmean, main="ICM SIR Model", popfrac=TRUE)})
runApp()
runApp()
source('~/Google Drive UW/UW/1920-sophomore/3-spring/info478/assignments/a2-peachyapas/app_ui.R')
runApp()
runApp()
runApp()
source('~/Google Drive UW/UW/1920-sophomore/3-spring/info478/assignments/a2-peachyapas/app_ui.R')
runApp()
runApp()
runApp()
runApp()
plot(mod_icm(),
main="ICM SIR Model",
popfrac = TRUE,
sim.lines = TRUE,
)
output$viz_icm <- renderPlot({
par(mar = c(3.5, 3.5, 1.2, 1), mgp = c(2.1, 1, 0))
plot(mod_icm(),
main="ICM SIR Model",
popfrac = TRUE,
sim.lines = TRUE,
mean.smooth = FALSE
)
})#mean.line = input$showmean,
runApp()
runApp()
source('~/Google Drive UW/UW/1920-sophomore/3-spring/info478/assignments/a2-peachyapas/app_ui.R')
runApp()
source('~/Google Drive UW/UW/1920-sophomore/3-spring/info478/assignments/a2-peachyapas/app_ui.R')
runApp()
source('~/Google Drive UW/UW/1920-sophomore/3-spring/info478/assignments/a2-peachyapas/app_ui.R')
runApp()
runApp()
runApp()
runApp()
source('~/Google Drive UW/UW/1920-sophomore/3-spring/info478/assignments/a2-peachyapas/app_ui.R')
source('~/Google Drive UW/UW/1920-sophomore/3-spring/info478/assignments/a2-peachyapas/app_ui.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(dplyr)
library(ggplot2)
library(tidyr)
library(plotly)
density_data_original <- read.csv('../data/prepped/covid-19-density-data-prepped.csv', stringsAsFactors = F)
density_data <- density_data_original #for manip
# how many people are being tested
density_data = density_data[-33, ] #removes new york
density_data = density_data[-9, ] #removes DC
# plot density vs covid testing
density_viz <- ggplot(data = density_data,
aes(label = Region, #if text, no title; https://stackoverflow.com/questions/36325154/how-to-choose-variable-to-display-in-tooltip-when-using-ggplotly
x = State_Density,
y = Covid_Total_Test_Results,
colour = Covid_Positive_4_4,
#fill = Covid_Positive
text = paste("<b>Region: </b>", Region,
'<br><b>State Density: </b>', State_Density,
'<br><b>Covid Total Test Results: </b>', Covid_Total_Test_Results,
'<br><b>Covid Positive Tests: </b>', Covid_Positive_4_4)
)) +
geom_point() +
labs(x = "State Density",
y = "Total number of tests",
colour = "Covid positive tests") +
ggtitle("State density and total number of COVID-19 tests")
# with hoverover
density_viz_hover <- ggplotly(density_viz, tooltip="text") #how to include region
#final data
density_viz_hover
#NY and DC were removed as you wouldn't be able to see the rest of the data
library(dplyr)
library(ggplot2)
library(tidyr)
library(plotly)
density_data_original <- read.csv('../data/prepped/covid-19-density-data-prepped.csv', stringsAsFactors = F)
density_data <- density_data_original #for manip
# how many people are being tested
density_data = density_data[-33, ] #removes new york
density_data = density_data[-9, ] #removes DC
# plot density vs covid testing
density_viz <- ggplot(data = density_data,
aes(label = Region, #if text, no title; https://stackoverflow.com/questions/36325154/how-to-choose-variable-to-display-in-tooltip-when-using-ggplotly
x = State_Density,
y = Covid_Total_Test_Results,
colour = Covid_Positive_4_4,
#fill = Covid_Positive
text = paste("<b>Region: </b>", Region,
'<br><b>State Density: </b>', State_Density,
'<br><b>Covid Total Test Results: </b>', Covid_Total_Test_Results,
'<br><b>Covid Positive Tests: </b>', Covid_Positive_4_4)
)) +
geom_point() +
labs(x = "State Density",
y = "Total number of tests",
colour = "Covid positive tests") +
ggtitle("State density and total number of COVID-19 tests")
# with hoverover
density_viz_hover <- ggplotly(density_viz, tooltip="text") #how to include region
#final data
density_viz_hover
#NY and DC were removed as you wouldn't be able to see the rest of the data
density_data_original <- read.csv('../data/prepped/covid-19-density-data-prepped.csv', stringsAsFactors = F)
setwd("~/Google Drive UW/UW/1920-sophomore/3-spring/info478/478-final/exploratory")
library(dplyr)
library(ggplot2)
library(tidyr)
library(plotly)
density_data_original <- read.csv('../data/prepped/covid-19-density-data-prepped.csv', stringsAsFactors = F)
density_data <- density_data_original #for manip
# how many people are being tested
density_data = density_data[-33, ] #removes new york
density_data = density_data[-9, ] #removes DC
# plot density vs covid testing
density_viz <- ggplot(data = density_data,
aes(label = Region, #if text, no title; https://stackoverflow.com/questions/36325154/how-to-choose-variable-to-display-in-tooltip-when-using-ggplotly
x = State_Density,
y = Covid_Total_Test_Results,
colour = Covid_Positive_4_4,
#fill = Covid_Positive
text = paste("<b>Region: </b>", Region,
'<br><b>State Density: </b>', State_Density,
'<br><b>Covid Total Test Results: </b>', Covid_Total_Test_Results,
'<br><b>Covid Positive Tests: </b>', Covid_Positive_4_4)
)) +
geom_point() +
labs(x = "State Density",
y = "Total number of tests",
colour = "Covid positive tests") +
ggtitle("State density and total number of COVID-19 tests")
# with hoverover
density_viz_hover <- ggplotly(density_viz, tooltip="text") #how to include region
#final data
density_viz_hover
#NY and DC were removed as you wouldn't be able to see the rest of the data
density_viz_2 <- ggplot(data = density_data,
aes(label = Region, #if text, no title; https://stackoverflow.com/questions/36325154/how-to-choose-variable-to-display-in-tooltip-when-using-ggplotly
x = State_Density,
y = (Covid_Positive_4_4 / Covid_Total_Test_Results),
# colour = Covid_Positive_4_4,
#fill = Covid_Positive
text = paste("<b>Region: </b>", Region,
'<br><b>State Density: </b>', State_Density,
'<br><br>Percentage of tests positive: </b>', (Covid_Positive_4_4 / Covid_Total_Test_Results)
# '<br><b>Covid Total Test Results: </b>', Covid_Total_Test_Results,
# '<br><b>Covid Positive Tests: </b>', Covid_Positive_4_4
)
)) +
geom_point() +
labs(x = "State Density",
y = "% of tests positive",
colour = "Covid positive tests") +
ggtitle("State density and percentage of positive COVID-19 tests")
# with hoverover
density_viz_2_hover <- ggplotly(density_viz_2, tooltip="text") #how to include region
density_viz_2 <- ggplot(data = density_data,
aes(label = Region, #if text, no title; https://stackoverflow.com/questions/36325154/how-to-choose-variable-to-display-in-tooltip-when-using-ggplotly
x = State_Density,
y = (Covid_Positive_4_4 / Covid_Total_Test_Results),
# colour = Covid_Positive_4_4,
#fill = Covid_Positive
text = paste("<b>Region: </b>", Region,
'<br><b>State Density: </b>', State_Density,
'<br><br>Percentage of tests positive: </b>', (Covid_Positive_4_4 / Covid_Total_Test_Results)
# '<br><b>Covid Total Test Results: </b>', Covid_Total_Test_Results,
# '<br><b>Covid Positive Tests: </b>', Covid_Positive_4_4
)
)) +
geom_point() +
labs(x = "State Density",
y = "% of tests positive",
colour = "Covid positive tests") +
ggtitle("State density and percentage of positive COVID-19 tests")
# with hoverover
density_viz_2_hover <- ggplotly(density_viz_2, tooltip="text") #how to include region
density_viz_2_hover
density_viz_2 <- ggplot(data = density_data,
aes(label = Region, #if text, no title; https://stackoverflow.com/questions/36325154/how-to-choose-variable-to-display-in-tooltip-when-using-ggplotly
x = State_Density,
y = (Covid_Positive_4_4 / Covid_Total_Test_Results),
# colour = Covid_Positive_4_4,
#fill = Covid_Positive
text = paste("<b>Region: </b>", Region,
'<br><b>State Density: </b>', State_Density,
'<br>Percentage of tests positive: </b>', round((Covid_Positive_4_4 *100/ Covid_Total_Test_Results), 2)
# '<br><b>Covid Total Test Results: </b>', Covid_Total_Test_Results,
# '<br><b>Covid Positive Tests: </b>', Covid_Positive_4_4
)
)) +
geom_point() +
labs(x = "State Density",
y = "% of tests positive",
colour = "Covid positive tests") +
ggtitle("State density and percentage of positive COVID-19 tests")
# with hoverover
density_viz_2_hover <- ggplotly(density_viz_2, tooltip="text") #how to include region
density_viz_2_hover
#route two
density_viz_2 <- ggplot(data = density_data,
aes(label = Region, #if text, no title; https://stackoverflow.com/questions/36325154/how-to-choose-variable-to-display-in-tooltip-when-using-ggplotly
x = State_Density,
y = (Covid_Positive_4_4 / Covid_Total_Test_Results),
# colour = Covid_Positive_4_4,
#fill = Covid_Positive
text = paste("<b>Region: </b>", Region,
'<br><b>State Density: </b>', State_Density,
'<br>Percentage of tests positive: </b>', round((Covid_Positive_4_4 *100/ Covid_Total_Test_Results), 2), '%'
# '<br><b>Covid Total Test Results: </b>', Covid_Total_Test_Results,
# '<br><b>Covid Positive Tests: </b>', Covid_Positive_4_4
)
)) +
geom_point() +
labs(x = "State Density",
y = "% of tests positive",
colour = "Covid positive tests") +
ggtitle("State density and percentage of positive COVID-19 tests")
# with hoverover
density_viz_2_hover <- ggplotly(density_viz_2, tooltip="text") #how to include region
density_viz_2_hover
